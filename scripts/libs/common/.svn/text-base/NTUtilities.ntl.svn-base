
function NTU_CheckMyStats()
{ 
	var _merc = NTC_GetMerc();
	var _diffmodifier;
	_diffmodifier = (me.diff == 1) ? -40 : (me.diff == 2) ? -100 : 0;
	
	var _res = [me.GetStat(39) + _diffmodifier, me.GetStat(41) + _diffmodifier, me.GetStat(43) + _diffmodifier, me.GetStat(45) + _diffmodifier];
	
	Print(" ");
	Print(COLOR_8 + "[" + COLOR_4 + "%MF: " + COLOR_3 + me.GetStat(80) + COLOR_8 + "][" + COLOR_4 + "%GF: " + COLOR_3 + me.GetStat(79) + COLOR_8 + "][" + COLOR_3 + "FCR: " + COLOR_2 + me.GetStat(105) + COLOR_8 + "][" + COLOR_3 + "FHR: " + COLOR_2 + me.GetStat(99) + COLOR_8 + "][" + COLOR_3 + "%DR: " + COLOR_2 + me.GetStat(36) + COLOR_8 + "][" + COLOR_3 + "FRW: " + COLOR_2 + me.GetStat(96) + COLOR_8 + "]");
	Print(COLOR_4 + "My Stacked Resistances:");
	Print(COLOR_8 + "[" + COLOR_1 + "FR: " + _res[0] + COLOR_8 + "][" + COLOR_9 + "LTR: " + _res[1] + COLOR_8 + "][" + COLOR_3 + "CLDR: " + _res[2] + COLOR_8 + "][" + COLOR_10 + ":PSNR: " + _res[3] + COLOR_8 + "]");
	Print(COLOR_11 + "Game ip = " + me.gameserverip);

	if(_merc)
	{	
		Print(COLOR_8 + "====================================");
		Print(COLOR_4 + "Merc: " + COLOR_8 + "[" + COLOR_4 + "%MF: " + COLOR_3 + _merc.GetStat(80) + COLOR_8 + "][" + COLOR_4 + "%GF: " + COLOR_3 + _merc.GetStat(79) + COLOR_8 + "]");
	}
	
	Print(" ");
}

function NTU_CheckCoord()	
	{
		_area = GetArea();
	 	if(_area)
			{
				Print(COLOR_9 + " X=" + me.x + ", Y=" + me.y);
				Print(COLOR_9 + "  In AreaID " + me.areaid + " , " + _area.name);
			}
	} 
	
function NTU_KeyPressList()
{
	
	Print(COLOR_8 + "Hit Pause/Break to pause bot"); 
 	NTC_Delay(1000);

	Print(COLOR_8 + "Page Up to scroll back through scripts"); 
 	NTC_Delay(1000);

	Print(COLOR_8 + "Page Down to scroll forward through scripts"); 
 	NTC_Delay(1000);

	Print(COLOR_8 + "Num Lock 1 to drop inventory and stash items"); 
 	NTC_Delay(1000);

	Print(COLOR_8 + "Num Lock 2 to use NTU_DevelopementTools"); 
	Print(COLOR_1 + "    Please not setting are configured within D2NT\scripts\libs\common\NTUtilities.ntl "); 
	Print(COLOR_1 + "    This is great for finding chest id's, monster id's etc"); 
 	NTC_Delay(1000);	

	Print(COLOR_8 + "Num Lock 3 prints the current x, y coord to logs/testlog/yourcharname/-Coords"); 
 	NTC_Delay(1000);
	
	Print(COLOR_8 + "Num Lock 4 for this list, lol"); 
 	NTC_Delay(1000);

	Print(COLOR_8 + "Num Lock 5 to print inventory list to txt file"); 
 	NTC_Delay(1000);
	
	Print(COLOR_8 + "Num Lock 6 to view item level of item on cursor."); 
 	NTC_Delay(1000);
	
	Print(COLOR_8 + "Num Lock 9 to list character stats and other usefull info"); 
 	NTC_Delay(1000);

	Print(COLOR_8 + "Num Lock * to print x,y coords and area name/id"); 
 	NTC_Delay(1000);

	Print(COLOR_8 + "Num Lock + to run nip checker"); 
 	NTC_Delay(1000);
} 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// nip checker by gumshield aka toothless ////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var _TLAliases = new Array();
var NTConfig_CheckCodes = true;

function NTU_TLNipCheck()
{
	Print(COLOR_3 + "[Toothless NIP Checker 2.0.0] - Load");
	
	if (NTConfig_NIPFilePath && NTConfig_NIPFilePath.length > 0)
	{
		var msg;
		msg = NTConfig_NIPFilePath.length + 
			" nip file" + 
			(NTConfig_NIPFilePath.length==1?"":"s") + 
			" found."
		Print(msg);
		
		var woops;
		var item;
		try { item = me.GetItems()[0]; woops = false;}
		catch (error) { Print("Please have at least one item on this character"); woops = true;}
		if (!woops) TLNC_DoIt(item);
	}
	else
		Print("No nip files found - check your character config file.");

	//while(1)
		//NTC_Delay(500);
		
	//NTC_SendMsgToScript("NTBotGame.ntj", "SCRIPT_END");
}

function TLNC_ParseLine(f, clean, line)
{
	var input;
	var sections;
	var keywords;
	var keyword;
	var keywordErrors = '';
	var keywordValue;
	var keywordValueErrors = '';
	var keywordAliasCodes = '';
	var skipList;
	var working;
	var aliases;
	var aliasesKey;
	var ret = 0;
	const KEYWORDS = "ftncqlps";

	sections = clean.split("#");
	if (sections[0] && sections[0].length > 4)
	{
		working = sections[0];
		keywords = sections[0].match(/\[((\s*?.*?)*?)\]/gi);
		if (keywords && keywords.length > 0)
		{
			skipList = new Array();
			for (var i = 0; i < keywords.length; i++)
			{
				keyword = keywords[i].substring(1, keywords[i].length - 1);
				working = working.slice(keywords[i].length);
				if (i + 1 < keywords.length)
				{
					keywordValue = working.slice(0, working.indexOf(keywords[i + 1]) - 1);
					working = working.slice(keywordValue.length + 1);
					keywordValue = keywordValue.replace(/[^\'a-zA-Z 0-9]+/g, '');
				}
				else
				{
					keywordValue = working.replace(/[^\'a-zA-Z 0-9]+/g, '');
				}

				aliasesKey = keyword.substring(0, 1);
				switch (aliasesKey)
				{
					case "l" :
					case "p" :
					case "s" :
						if (isNaN(keywordValue))
						{
							keywordValueErrors += keywordValue + " ";
							ret = -1;
						}
						break;

					case "t" :
					case "n" :
					case "c" :
					case "q" :
					case "f" :
						if (isNaN(keywordValue))
						{
							aliases = _TLAliases[aliasesKey];
							if (!aliases)
							{
									keywordErrors += keyword + " ";
									ret = -1;
							}				
							else
							{
								if (aliases.indexOf(keywordValue) < 0)
								{
									keywordValueErrors += keywordValue + " ";
									ret = -1;
								}
							}
						}
						else
						{
							if (skipList.indexOf(keyword + keywordValue) < 0)
							{
								aliases = _TLAliases[aliasesKey + "1"];
								if (aliases["c" + keywordValue] != null)
								{
									keywordAliasCodes += keywordValue + "=[" + aliases["c" + keywordValue] + "] ";
									ret = 1;
								}
								else
								{
									keywordValueErrors += keywordValue;
									ret = -1;
								}
							}
							skipList.push(keyword + keywordValue);
						}
						
						break;

					default :
						keywordErrors += keyword + " ";
						ret = -1;
						break;
				}
			}
		}
		else
		{
			keywordErrors += "No keywords found before # ";
			ret = -1;
		}
	}

	if (sections[1] && sections[1].length > 4)
	{
		working = sections[1];
		keywords = sections[1].match(/\[((\s*?.*?)*?)\]/gi);

		if (keywords && keywords.length > 0)
		{
			skipList = new Array();
			for (var i = 0; i < keywords.length; i++)
			{
				keyword = keywords[i].substring(1, keywords[i].length - 1);
				working = working.slice(keywords[i].length);

				
				if (isNaN(keyword))
				{
					aliases = _TLAliases["s"];
					if (aliases.indexOf(keyword) < 0)
					{
						keywordValueErrors += keyword + " ";
						ret = -1;
					}
				}
				else
				{
					if (skipList.indexOf(keyword) < 0)
					{
						aliases = _TLAliases["s1"];
						if (aliases["c" + keyword] != null)
						{
							keywordAliasCodes += keyword + "=[" + aliases["c" + keyword] + "] ";
							ret = 1;
						}
						else
						{
							keywordValueErrors += keyword;
							ret = -1;
						}
					}
					skipList.push(keyword);
				}
			}
		}
		else
		{
			keywordErrors += "No keywords found after # ";
			ret = -1;
		}
	}
	if (ret != 0)
	{
		if ((keywordErrors.length > 0) || (keywordValueErrors.length > 0) || (NTConfig_CheckCodes && keywordAliasCodes.length > 0))
			f.WriteLine(line);
		if (keywordErrors.length > 0)
			f.WriteLine("\tKeyword Errors\t\t:\t" + keywordErrors);
		if (keywordValueErrors.length > 0)
			f.WriteLine("\tAlias Errors\t\t:\t" + keywordValueErrors);
		if (NTConfig_CheckCodes && keywordAliasCodes.length > 0)
			f.WriteLine("\tCode Sanity Check\t:\t" + keywordAliasCodes);
		f.WriteLine("");
	}

	return ret;
}

function TLNC_DoIt(item)
{
	var passRT = 0;
	var failRT = 0;
	var nipsRT = 0;

	var pass = 0;
	var fail = 0;
	var nips = 0;

	var input;
	var line;
	var nip;
	var evals;
	var output;
	var fileNameNip;
	var fileNameOutput;
	var woops;
	var msg;
	var parseResult = 0;
	
	for (var nipfile = 0 ; nipfile < NTConfig_NIPFilePath.length ; nipfile++)
	{
		fileNameNip = "NTBot/item_configs/" + NTConfig_NIPFilePath[nipfile];
		nip = FileOpen(fileNameNip, 0);
		if (nip)
		{
			TLNC_LoadItemAliases();

			pass = 0;
			fail = 0;
			nips = 0;
			
			fileNameOutput = "NTBot/item_configs/TLNipCheck_" + NTConfig_NIPFilePath[nipfile].replace("/", "_") + ".txt";
			output = FileOpen(fileNameOutput, 1);
			if (output)
			{
				while (!nip.eof)
				{
					input = nip.ReadLine();
					input = input.replace(/^\s+/, '');
					
					var i = input.indexOf("//");
					line = i >= 0 ? input.slice(0, i) : input;
					line = line.replace(/ |;|\t|\v|\f|\r|\n/g, '').toLowerCase();

					if (line.length == 0)
						continue;
					
					nips++;
					woops = false;

					parseResult = TLNC_ParseLine(output, line, input);
					if (parseResult < 0)
					{
						fail++;
						continue;
					}

					evals = NTIPParseLineInt_Fooed(line);
					if (evals && evals.length > 0)
					{
						if (evals[0].length > 0)
						{
							try
							{
								eval(evals[0]);
								if (evals[1].length > 0)
								{
									try { eval(evals[1]); woops = false; }
									catch (error)
									{
										TLNC_WriteIt(output, input, "\tEval error\t\t:\tAfter #");
										woops = true;
									}
								}
							}
							catch (error)
							{
								TLNC_WriteIt(output, input, "\tEval error\t\t:\tBefore #");
								woops = true;
							}
							woops == true ? fail++ : pass++;
						}
						else
						{
							if (evals[1].length > 0)
							{
								try { eval(evals[1]); woops = false; }
								catch (error)
								{
									TLNC_WriteIt(output, input, "\tEval error\t\t:\tAfter #");
									woops = true;
								}
							}
							woops == true ? fail++ : pass++;
						}
					}
				}
				
				msg = "File (" + eval(nipfile+1) + "/" + NTConfig_NIPFilePath.length + ") " + NTConfig_NIPFilePath[nipfile];
				msg += fail > 0 ? COLOR_1 + " FAIL" : COLOR_2 +" OK";
				msg += fail > 0 ? COLOR_0 : COLOR_2;
				msg += " (" + pass + "/" + nips + ")";
				msg += fail > 0 ? COLOR_1 : COLOR_0;
				msg += " (" + fail + "/" + nips + ")";
				Print(msg);

				TLNC_WriteIt(output, "PASS : " + pass, "FAIL : " + fail);
				output.Close();
			}
			else
				Print(COLOR_1 + "Error creating output file : " + fileNameOutput);
				
			nip.Close();
			passRT += pass;
			failRT += fail;
			nipsRT += nips;
		}
		else
			Print(COLOR_1 + "Error opening nip file : " + fileNameNip);
	}

	Print("TOTALS : " + nipsRT + " total, " + COLOR_2 + passRT + " pass, " + COLOR_1 + failRT + " fail");
	if ((failRT > 0) || (parseResult != 0))
		Print(COLOR_1 + "Check output files in /NTBot/item_configs/ directory");
}

function TLNC_WriteIt(f, l1, l2)
{
	f.WriteLine(l1);
	f.WriteLine(l2);
	f.WriteLine(" ");
}

function TLNC_LoadItemAliases()
{
	var arr, arr1;

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasType)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasType[k]] = k;
	}
	_TLAliases["t"] = arr;
	_TLAliases["t1"] = arr1;	

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasClassID)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasClassID[k]] = k;
	}
	_TLAliases["n"] = arr;
	_TLAliases["n1"] = arr1;	

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasClass)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasClass[k]] = k;
	}
	_TLAliases["c"] = arr;
	_TLAliases["c1"] = arr1;	

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasQuality)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasQuality[k]] = k;
	}
	_TLAliases["q"] = arr;
	_TLAliases["q1"] = arr1;	
	
	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasFlag)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasFlag[k]] = k;
	}
	_TLAliases["f"] = arr;
	_TLAliases["f1"] = arr1;	

	// #

	arr = new Array();
	arr1 = new Array();
	for (k in _NTIPAliasStat)
	{
		arr.push(k);
		arr1["c" + _NTIPAliasStat[k]] = k;
	}
	_TLAliases["s"] = arr;	
	_TLAliases["s1"] = arr1;
}


function NTIPParseLineInt_Fooed(input)
{
	var i;
	var _start, _end;
	var _section, _keyword;
	var _result;
	const OPERATORS = "+-/*%&|^~";
	
	_end = input.indexOf("//");
	if(_end != -1)
		input = input.substring(0, _end);
	input = input.replace(/\s+|;/g, "").toLowerCase();
	// dirty hack
	input = input.replace(/\|{2}|\+|\-|\/{1}|\*|\%/g, "&&");
	if(input.length < 5)
		return null;

	_result = input.split("#");

	if(_result[0] && _result[0].length > 4)
	{
		_section = _result[0].split("[");
		_result[0] = _section[0];
		for(i = 1 ; i < _section.length ; i++)
		{
			_end = _section[i].indexOf("]") + 1;
			switch(_section[i][0])
				{
				case 'f':
					_result[0] += "(1";
					_end += 2;
					break;
				case 't':
				case 'n':
				case 'c':
				case 'q':
				case 'l':
				case 'p':
				case 's':
					_result[0] += "1";
					break;
				default:
					break;
				}

			for(_start = _end ; _end < _section[i].length ; _end++)
				if(!NTIPIsSyntaxInt(_section[i][_end]))
					break;

			_result[0] += "==";

			for(_start = _end ; _end < _section[i].length ; _end++)
				if(NTIPIsSyntaxInt(_section[i][_end]))
					break;

			_keyword = _section[i].substring(_start, _end);

			if(isNaN(_keyword))
			{
				switch(_section[i][0])
				{
					case 'f':
						_result[0] += "1)";
						break;
					case 't':
					case 'n':
					case 'c':
					case 'q':
					case 'l':
					case 'p':
					case 's':
						_result[0] += "1";
						break;
				}
			}
			else
			{
				if(_section[i][0] == 'f')
					_result[0] += "1)";
				else
					_result[0] += "1";
			}

			_result[0] += _section[i].substring(_end);
		}
	}
	else
		_result[0] = "";


	if(_result[1] && _result[1].length > 4)
	{
		_section = _result[1].split("[");
		_result[1] = _section[0];
		for(i = 1 ; i < _section.length ; i++)
		{
			_end = _section[i].indexOf("]") + 1;

			// dirty hack
			if (_result[1].length > 0)
			{
				switch (_result[1].slice(_result[1].length - 1))
				{
					case "&":
					case "(":
						break;
					default :
						_result[1] += "&&";
						break;
				}
			}

			_result[1] += "1==1";

			for(_start = _end ; _end < _section[i].length ; _end++)
				if(!NTIPIsSyntaxInt(_section[i][_end]))
					break;

			for(_start = _end ; _end < _section[i].length ; _end++)
				if(NTIPIsSyntaxInt(_section[i][_end]))
					break;

			_keyword = _section[i].substring(_start, _end);
			_result[1] += _section[i].substring(_end);
		}
	}
	else
		_result[1] = "";
		
	return _result;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
*	Version History
*	Last update	12-MAY-2010
*
*	2.0.0	FIX MAJOR - logical operations
*			(all previous versions serisouly flawed)
*
*	1.0.3	FIX	omitted keywords : p and s
*	1.0.2	FIX	allow for either aliases or codes
*		FIX	Level keyword
*		ADD	sanity checks codes (if used) and logs the alias equivalent
*	1.0.1	ADD	checks aliases are valid against libs/common/NTItemAlias.ntl file
*	1.0.0		initial release	
*
*	gumshield@hotmail.com
*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////// NIP CHECK END ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function NTU_TLInventory() {
	NTConfig_TLInventory_SkipEquipped   = true;         // true = just log stash and inventory
	NTConfig_TLInventory_Delimeter      = "-";            // output file delimiter - see function TTL_WriteIt()
	NTConfig_TLInventory_SortOrder      = "QUALITY|TYPE|CLASS|NAME";
	
	Print(COLOR_3 + "[Toothless Inventory] - Load");
   
	TLI_DoIt();
	Print ("Finished");
}

function TLI_DoIt() {
	Print ("Attempting to log inventory ...");
   
	var items = me.GetItems();
	items.sort(function(a, b){
		var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
		if (nameA < nameB) //sort string ascending
			return -1
		if (nameA > nameB)
			return 1
		return 0 //default return value (no sorting)
	});
	var logged = new Array();
	if (items) {
		for(var i = 0 ; i < items.length ; i++) {
			item = items[i];
			ignore = _NTT_IgnoredItems.join("-");
			ignore += "-box";
         
			if(ignore.indexOf(item.code) == -1) {
				if(!NTConfig_TLInventory_SkipEquipped)
					logged.push(item);
				else if (item.mode == 0)
					logged.push(item);
			}
		}
		if (logged.length) {
			var fileName = "logs/" + me.account + "." + me.name + ".txt";
			_file = FileOpen(fileName, 1);
			if (_file) {
				for (var i = 0; i < logged.length; i++)
					TLI_WriteIt(_file, logged[i]);
				_file.Close();
				Print (COLOR_2 + logged.length + " items written to - " + fileName + " -");
			}
			else
				Print(COLOR_1 + "Unable to write file to - " + fileName);
		}
		else
			Print(COLOR_1 + "No items on this character to log");
	}
	else
		Print(COLOR_1 + "No items on this character to log");
}

function TLI_WriteIt(pFile, pItem) {
	var delim = " " + NTConfig_TLInventory_Delimeter + " ";
	if (pItem.name.substring(pItem.name.length-4,pItem.name.length) == "Rune"){   
		var s = pItem.name.replace("\n", " ");
	}
	else {
		var s = pItem.name.replace("\n", " ") + delim + TLI_ItemDesc(pItem)
		s = s.replace(" /", " ");
		s = s.replace("  ", " ");
	}
	pFile.WriteLine(s);
}

function TLI_ItemDesc(item) {
	var re;
	var s = item.itemdesc;
	
	s = s.replace(REGEX6, REPLACE6);  
	re = new RegExp(item.name, "gi");
	s = s.replace(re, "");
	s = s.replace(/(\d% Bonus to Attack Rating)/, "Visionary");
	s = s.replace("Visionary (Based on Character Level)", "Visionary");
	s = s.replace("Keep in Inventory to Gain Bonus", "");
	s = s.replace("Better Chance of Getting Magic Items", "MF");
	s = s.replace("Extra Gold from Monsters", "GF");
	s = s.replace("Faster Run/Walk", "FRW");
	s = s.replace("Enhanced Defense", "ED");
	s = s.replace("Reduces all Vendor Prices", "VP");
	s = s.replace("Mana stolen her hit", "ML");
	s = s.replace("Life stolen per hit", "LL");
	s = s.replace(/('\w+')/, "");
	s = s.replace(/(Durability:\s+\d+\s+\w{2}\s+\d+)/, "")
	s = s.replace(/(Durability:\s+\d{2}\s+\w{2}\s+\d{2})/, "");
	s = s.replace(/(Durability:\s+\d\s+\w{2}\s+\d{2})/, "");
	s = s.replace("to Mana", "Mana");
	s = s.replace("to Strength", "STR");
	s = s.replace("to Dexterity", "DEX");
	s = s.replace("to Life", "Life");
	s = s.replace("to Vitality", "Vita");
	s = s.replace("to Energy", "Energy");
	s = s.replace("Faster Hit Recovery", "FHR");
	s = s.replace("Damage Reduced by", "DR");
	s = s.replace("Faster Cast Rate", "FCR");
	s = s.replace(/(poison damage over \d seconds)/, "psn sc");
	s = s.replace(/(poison damage over \d+ seconds)/, "psn sc");
	s = s.replace(/Required Level: \d+/, "");
	s = s.replace(/Required Strength: \d+/, "");
	s = s.replace(/Required Dexterity: \d+/, "");
	s = s.replace("to Enemy Fire Resistance", "Enemy FRes");
	s = s.replace("to Enemy Lightning Resistance", "Enemy LRes");
	s = s.replace("to Enemy Cold Resistance", "Enemy CRes");
	s = s.replace("to Enemy Poison Resistance", "Enemy PRes");
	s = s.replace("Fire Resist", "FRes");
	s = s.replace("Lightning Resist", "LRes");
	s = s.replace("Cold Resist", "CRes");
	s = s.replace("Poison Resist", "PRes");
	s = s.replace("to Attack Rating", "AR");
	s = s.replace(/(\w+\s+\d\s+\w+\s+\w{2}\s+\d{2}\s+\w+\s+)/, "Self-Repair");
	s = s.replace(/(\w+\s+\d\s+\w+\s+\w{2}\s+\d+\s+\w+\s+)/, "Self-Repair");
	s = s.replace(/(\w+\s+\d\s+\w+\s+\w{2}\s+\d\s+\w+\s+)/, "Self-Repair");
	s = s.replace("Ethereal (Cannot be Repaired)", " Eth");
	s = s.replace("Can be Inserted into Socketed Items/Weapons:", "");
	s = s.replace("", "");
	s = s.replace("", "");
	re = new RegExp(item.name, "gi");
	re = new RegExp("\\n", "gi");
	s = s.replace(re, "/");
	s = s.replace("////", "/");
	s = s.replace("///", "/");
	s = s.replace("//", "/");
   
	return s;
}

function NTU_DropItems() {
	var _script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);
	if (_script.running && NTC_InTown())
		return;
	
	Print("Dropping Inventory and Stash");
	NTU_MoveToStash();
	NTU_ClearInventory();
	NTU_DropStash();
	Print("Done Dropping Inventory and Stash");
}

function NTU_ClearInventory() {
	var _items = me.GetItems();

	if(!_items)
		return false;	
	
	for(var i = 0 ; i < _items.length ; i++) {		
		if(_items[i].itemloc == 0  && !NTSI_IsIgnoredItemInt(_items[i].classid) && NTConfig_Columns[_items[i].y][_items[i].x] > 0) {
			NTT_DropItem(_items[i]);		
		}
	}
}

function NTU_MoveToStash() {
	var _stash;

	NTTM_TownMove("stash");

	_stash = NTC_FindUnit(NTC_UNIT_OBJECT, NTC_UNIT_STASH, 5);

	if(_stash) {
		NTT_DoInteract(_stash);
	}
}

function NTU_DropStash() {
	var _items = me.GetItems();

	if(!_items)
		return false;

	for(var i = 0 ; i < _items.length ; i++) {
		if(_items[i].mode == 0 && _items[i].itemloc == 4 && _items[i].classid != 549) {
			NTT_DropItem(_items[i]);		
         	}
	}
	me.Cancel(1);
} 

function NTU_CursorILvl() {
	if(me.itemoncursor) {
		Print(COLOR_4 + me.GetCursorItem().name.split("\n")[0] + COLOR_8 + " - " + COLOR_4 + "Item Level " + COLOR_8 + me.GetCursorItem().itemlevel);
	}
	else
		Print(COLOR_8 + "Nothing On Cursor To Check.");
}
// ubi21 Enigma reset start
////////////////////////////

// Need a msging system to prevent certain code from executing when another is running.
function NTU_LogExitStatus(value)
{   
   var _hfile = FileOpen(me.account + "_exitValue.txt", 1);
   if(!_hfile)
      return false;

   _hfile.WriteLine(value);
   _hfile.Close();
}

function NTU_GetExitStatus()
{
   var _script;
   
   var _hfile = FileOpen(me.account + "_exitValue.txt", 2);
   if(!_hfile)
      return "E";

   _script = _hfile.ReadLine();
   
   _hfile.Close();
   
   return _script;
}
// ubi21 Enigma reset end
////////////////////////////

function NTU_DontOpenAreas() {
	
	var _presentarea = me.areaid

	for (var i = 0; i < NTConfig_DontOpenChestAreas.length; i++) {
		if (_presentarea == NTConfig_DontOpenChestAreas[i]){
			return false;
		}
	}
	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																													                      //
// NT_Developement tools started by stairbuilder on 11-26-10                                                                              //
// My hope is that others will contribute to this script so we can have a nice little development file to work from                       //
// Feel free to add to this file or to change anything to make it more useful                                                             //
// also as we all know some of the id names are wrong/different so if you find something that is wrong or different feel free to chang it //										 //
//																													                      //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function NTU_DevelopementTools()
{
	getlocalstringids = false;			// pretty much same as objects
	objectids = true;
	monsterids = false;					// prints the name and id number of monsters.  Probably should set a range for it but been using it for summons
	getstate = false;					// prints id # of state and "active" if the state is active
	var MonsterIdRange = 	[0, 575];	// set the range of id's you want to look for ie [420, 432] looks for druid summons
										// you can set the MonsterRange = [0, 575] and it will give all monsters near you, but to be effective need to add a range to it
	var StateIdRange = 	[0, 159];		// set the range of me.states you want to check if active ie [141, 154] looks for druid states
	var _mestate;
	var ObjectIdRange = [0, 600];		// this is range of object id's similar to above ranges
	var _objectlookrange = 5;			// this is the distance that you wish to look for objects from your toon
	var StringIdRange = [2500, 4000];	// this is range getlocalstrings  id's similar to above ranges
	var _stringlookrange = 5;			// this is the distance that you wish to look for getlocalstrings from your toon

	Print(COLOR_2 + IdToName() + " - CharacterClass(" +me.classid+ ")");
	Print("   ");
	
	if(monsterids){
		for(var i = MonsterIdRange[0]; i < MonsterIdRange[1] ; i++){
			var _monster = NTC_FindUnit(NTC_UNIT_MONSTER, i);
			if(NTC_FindUnit(NTC_UNIT_MONSTER, i)){
				if(_monster.GetParent() != null)
					Print(COLOR_8 + _monster.name + " - monsterid(" + i + ") - parent is (" +_monster.GetParent().name + ")" + " - monster mode is " + "[" + _monster.mode + "]");
				else
					Print(COLOR_8 + _monster.name + " - monsterid(" + i + ")" + " - monster mode is " + "[" + _monster.mode + "]");
				Delay(500);
			}
		}
	}
	Print("   ");

	if(getstate){
		for(var i = StateIdRange[0]; i < StateIdRange[1]; i++){
			if(me.GetState(i)){
				Print(COLOR_9 + StateToName(i).toLowerCase() + " - me.GetState(" + i  +") is active ");
				Delay(500);	
			}
		}
	}
	Print("   ");

	if(objectids){
		for(var i = ObjectIdRange[0]; i < ObjectIdRange[1] ; i++){
			var _object = NTC_FindUnit(NTC_UNIT_OBJECT, i);
			if(NTC_FindUnit(NTC_UNIT_OBJECT, i) && (GetDistance(me.x,me.y,_object.x,_object.y)<_objectlookrange))
				Print(COLOR_14 + "object name is - " + _object.name + " - objectid - (" + i + ")" + " - objects mode is " + "[" + _object.mode + "]");
			//Delay(500);
		}
	}
	Print("   ");
	if(getlocalstringids){
		for(var i = StringIdRange[0]; i < StringIdRange[1]; i++){
			var _stringobject = NTC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(i));
			if(NTC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(i)) && (GetDistance(me.x,me.y,_stringobject.x,_stringobject.y)<_stringlookrange))
				Print(COLOR_14 + "String name is - " + _stringobject.name + " - stringid - (" + i + ")" + " - objects mode is " + "[" + _stringobject.mode + "]");
			//Delay(30);
		}
	}
	Print("   ");

}

function IdToName(){
	
	switch(me.classid)
	{
		case 0:
			return "Amazon";
		case 1:
			return "Sorceress";
		case 2:
			return "Necromancer";
		case 3:
			return "Paladin";			
		case 4:
			return "Barbarian";						
		case 5:
			return "Druid";						
		case 6:
			return "Assassin";			
	}
}

function StateToName(_mestate){
	
	var _state;
	
	switch(_mestate)
	{
		case 0:
			return "NONE"; 
				break;
		case 1:
			return "FREEZE";
				break;
		case 2:
			return "POISON";
				break;
		case 3:
			return "RESISTFIRE";
				break;				
		case 4:
			return "RESISTCOLD";
				break;							
		case 5:
			return "RESISTLIGHT";
				break;							
		case 6:
			return "RESISTMAGIC ";
				 	
		case 7:
			return "PLAYERBODY"; 
				break;
		case 8:
			return "RESISTALL";
				break;
		case 9:
			return "AMPLIFYDAMAGE ";
				break;
		case 10:
			return "FROZENARMOR"; 
				break;
		case 11:
			return "COLD";
				break;
		case 12:
			return "INFERNO";
				break;
		case 13:
			return "BLAZE";
				break;				
		case 14:
			return "BONEARMOR";
				break;							
		case 15:
			return "CONCENTRATE";
				break;							
		case 16:
			return "ENCHANT";
				break;	
		case 17:
			return "INNERSIGHT"; 
				break;
		case 18:
			return "SKILL_MOVE";
				break;
		case 19:
			return "WEAKEN";
				break;
		case 20:
			return "CHILLINGARMOR"; 
				break;
		case 21:
			return "STUNNED";
				break;
		case 22:
			return "SPIDERLAY";
				break;
		case 23:
			return "DIMVISION";
				break;				
		case 24:
			return "SLOWED";
				break;							
		case 25:
			return "FETISHAURA";
				break;							
		case 26:
			return "SHOUT";
				break;	
		case 27:
			return "TAUNT"; 
				break;
		case 28:
			return "CONVICTION";
				break;
		case 29:
			return "CONVICTED";
				break;
		case 30:
			return "ENERGYSHIELD"; 
				break;
		case 31:
			return "VENOMCLAWS";
				break;
		case 32:
			return "BATTLEORDERS";
				break;
		case 33:
			return "MIGHT";
				break;				
		case 34:
			return "PRAYER";
				break;							
		case 35:
			return "HOLYFIRE";
				break;							
		case 36:
			return "THORNS";
				break;	
		case 37:
			return "DEFIANCE"; 
				break;
		case 38:
			return "THUNDERSTORM";
				break;
		case 39:
			return "LIGHTNINGBOLT";
				break;
		case 40:
			return "BLESSEDAIM"; 
				break;
		case 41:
			return "STAMINA";
				break;
		case 42:
			return "CONCENTRATION";
				break;
		case 43:
			return "HOLYWIND";
				break;				
		case 44:
			return "HOLYWINDCOLD";
				break;							
		case 45:
			return "CLEANSING";
				break;							
		case 46:
			return "HOLYSHOCK";
				break;	
		case 47:
			return "SANCTUARY"; 
				break;
		case 48:
			return "MEDITATION";
				break;
		case 49:
			return "FANATICISM";
				break;
		case 50:
			return "REDEMPTION"; 
				break;
		case 51:
			return "BATTLECOMMAND";
				break;
		case 52:
			return "PREVENTHEAL";
				break;
		case 53:
			return "CONVERSION";
				break;				
		case 54:
			return "UNINTERRUPTABLE";
				break;							
		case 55:
			return "IRONMAIDEN";
				break;							
		case 56:
			return "TERROR";
				break;	
		case 57:
			return "ATTRACT"; 
				break;
		case 58:
			return "LIFETAP";
				break;
		case 59:
			return "CONFUSE";
				break;
		case 60:
			return "DECREPIFY"; 
				break;
		case 61:
			return "LOWERRESIST";
				break;
		case 62:
			return "OPENWOUNDS";
				break;
		case 63:
			return "DOPPLEZON";
				break;				
		case 64:
			return "CRITICALSTRIKE";
				break;							
		case 65:
			return "DODGE";
				break;							
		case 66:
			return "AVOID";
				break;	
		case 67:
			return "PENETRATE"; 
				break;
		case 68:
			return "EVADE";
				break;
		case 69:
			return "PIERCE";
				break;
		case 70:
			return "WARMTH"; 
				break;
		case 71:
			return "FIREMASTERY";
				break;
		case 72:
			return "LIGHTNINGMASTERY";
				break;
		case 73:
			return "COLDMASTERY";
				break;				
		case 74:
			return "SWORDMASTERY";
				break;							
		case 75:
			return "AXEMASTERY";
				break;							
		case 76:
			return "MACEMASTERY";
				break;	
		case 77:
			return "POLEARMMASTERY"; 
				break;
		case 78:
			return "THROWINGMASTERY";
				break;
		case 79:
			return "SPEARMASTERY";
				break;
		case 80:
			return "INCREASEDSTAMINA"; 
				break;
		case 81:
			return "IRONSKIN";
				break;
		case 82:
			return "INCREASEDSPEED";
				break;
		case 83:
			return "NATURALRESISTANCE";
				break;				
		case 84:
			return "FINGERMAGECURSE";
				break;							
		case 85:
			return "NOMANAREGEN";
				break;							
		case 86:
			return "JUSTHIT";
				break;	
		case 87:
			return "SLOWMISSILES"; 
				break;
		case 88:
			return "SHIVERARMOR";
				break;
		case 89:
			return "BATTLECRY";
				break;
		case 90:
			return "BLUE"; 
				break;
		case 91:
			return "RED";
				break;
		case 92:
			return "DEATH_DELAY";
				break;
		case 93:
			return "VALKYRIE";
				break;				
		case 94:
			return "FRENZY";
				break;							
		case 95:
			return "BERSERK";
				break;							
		case 96:
			return "REVIVE";
				break;	
		case 97:
			return "ITEMFULLSET"; 
				break;
		case 98:
			return "SOURCEUNIT";
				break;
		case 99:
			return "REDEEMED";
				break;
		case 100:
			return "HEALTHPOT"; 
				break;
		case 101:
			return "HOLYSHIELD";
				break;
		case 102:
			return "JUST_PORTALED";
				break;
		case 103:
			return "MONFRENZY";
				break;				
		case 104:
			return "CORPSE_NODRAW";
				break;							
		case 105:
			return "ALIGNMENT";
				break;							
		case 106:
			return "MANAPOT";
				break;	
		case 107:
			return "SHATTER"; 
				break;
		case 108:
			return "SYNC_WARPED";
				break;
		case 109:
			return "CONVERSION_SAVE";
				break;
		case 110:
			return "PREGNANT"; 
				break;
		case 111:
			return "111";
				break;
		case 112:
			return "RABIES";
				break;
		case 113:
			return "DEFENSE_CURSE";
				break;				
		case 114:
			return "BLOOD_MANA";
				break;							
		case 115:
			return "BURNING";
				break;							
		case 116:
			return "DRAGONFLIGHT";
				break;	
		case 117:
			return "MAUL"; 
				break;
		case 118:
			return "CORPSE_NOSELECT";
				break;
		case 119:
			return "SHADOWWARRIOR";
				break;
		case 120:
			return "FERALRAGE"; 
				break;
		case 121:
			return "SKILLDELAY";
				break;
		case 122:
			return "PROGRESSIVE_DAMAGE";
				break;
		case 123:
			return "PROGRESSIVE_STEAL";
				break;				
		case 124:
			return "PROGRESSIVE_OTHER";
				break;							
		case 125:
			return "PROGRESSIVE_FIRE";
				break;							
		case 126:
			return "PROGRESSIVE_COLD";
				break;	
		case 127:
			return "PROGRESSIVE_LIGHTNING"; 
				break;
		case 128:
			return "SHRINE_ARMOR";
				break;
		case 129:
			return "SHRINE_COMBAT";
				break;
		case 130:
			return "SHRINE_RESIST_LIGHTNING"; 
				break;
		case 131:
			return "SHRINE_RESIST_FIRE";
				break;
		case 132:
			return "SHRINE_RESIST_COLD";
				break;
		case 133:
			return "SHRINE_RESIST_POISON";
				break;				
		case 134:
			return "SHRINE_SKILL";
				break;							
		case 135:
			return "SHRINE_MANA_REGEN";
				break;							
		case 136:
			return "SHRINE_STAMINA";
				break;	
		case 137:
			return "SHRINE_EXPERIENCE"; 
				break;
		case 138:
			return "FENRIS_RAGE";
				break;
		case 139:
			return "WOLF";
				break;
		case 140:
			return "BEAR"; 
				break;
		case 141:
			return "BLOODLUST";
				break;
		case 142:
			return "CHANGECLASS";
				break;
		case 143:
			return "ATTACHED";
				break;				
		case 144:
			return "HURRICANE";
				break;							
		case 145:
			return "ARMAGEDDON";
				break;							
		case 146:
			return "INVIS";
				break;	
		case 147:
			return "BARBS"; 
				break;
		case 148:
			return "WOLVERINE";
				break;
		case 149:
			return "OAKSAGE";
				break;
		case 150:
			return "VINE_BEAST"; 
				break;
		case 151:
			return "CYCLONEARMOR";
				break;
		case 152:
			return "CLAWMASTERY";
				break;
		case 153:
			return "CLOAK_OF_SHADOWS";
				break;				
		case 154:
			return "RECYCLED";
				break;							
		case 155:
			return "WEAPONBLOCK";
				break;							
		case 156:
			return "CLOAKED";
				break;	
		case 157:
			return "QUICKNESS"; 
				break;
		case 158:
			return "BLADESHIELD";
				break;
		case 159:
			return "FADE";
				break;
			
	}
	return _state;
}

function NTU_LogPrint(filepath, mesg){
	
	var _Myarea = GetArea();
	var _filepath = filepath;
	var _mesg = mesg;
	
	var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
	var logfile = FileOpen(_filepath, 2); // opens file 
	if(!logfile)
		var logfile = FileOpen(_filepath, 1); // if file not there then creates it

	logfile.WriteLine(date + " " + _mesg + "Area[" + _Myarea.name + "]");
	logfile.Close();
}

/*function NTU_LogPrintSimple(filepath, mesg, printareaid){ // will eventually conbine the log print functions, but for now.....

	if(arguments.length < 3 || printareaid)
		var _Myarea = GetArea();
	else if(!printareaid)
		var _Myarea = "";
	var _filepath = filepath;
	var _mesg = mesg;
	
	var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
	var logfile = FileOpen(_filepath, 2); // opens file 
	if(!logfile)
		var logfile = FileOpen(_filepath, 1); // if file not there then creates it

	logfile.WriteLine(date + " " + _mesg + "Area[" + _Myarea.name + "]");
	logfile.Close();
}*/
